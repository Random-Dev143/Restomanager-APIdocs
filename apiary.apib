# API Restomanager

FORMAT: 1A
HOST: https://restomanager.onrender.com

## Menú [/menu]

### Obtener todos los productos [GET]
+ Response 200 (application/json)

    + Body

        [
            {
                "id": 1,
                "producto": "Papas Nostra",
                "precio": 3400,
                "descripcion": "Papas fritas, salsa cheddar, panceta crispy",
                "categoria": "Entradas",
                "agregados": [
                    {
                        "nombre": "Extra Cheddar",
                        "precio": 300,
                        "descripcion": ""
                    },
                    {
                        "nombre": "Panceta",
                        "precio": 600,
                        "descripcion": ""
                    }
                ],
                "imagenes": [
                    {
                        "url": "https://fakeurl.com/imagen1"
                    }
                ]
            }
        ]

### Crear un nuevo producto o múltiples productos [POST]
Este endpoint acepta un objeto de producto o una lista de objetos para crear uno o más productos simultáneamente.

+ Request (application/json)
    + Headers
        + Authorization: Bearer jwt_token_here

    + Body

        [
            {
                "producto": "Papas Nostra",
                "precio": 3400,
                "descripcion": "Papas fritas, salsa cheddar, panceta crispy",
                "categoria": "Entradas",
                "agregados": [
                    {
                        "nombre": "Extra Cheddar",
                        "precio": 300,
                        "descripcion": ""
                    },
                    {
                        "nombre": "Panceta",
                        "precio": 600,
                        "descripcion": ""
                    }
                ],
                "imagenes": [
                    {
                        "url": "https://fakeurl.com/imagen1"
                    }
                ]
            },
            {
                "producto": "Rabas",
                "precio": 6800,
                "descripcion": "Rabas con salsa criolla",
                "categoria": "Entradas",
                "agregados": [
                    {
                        "nombre": "Aros de cebolla",
                        "precio": 700,
                        "descripcion": ""
                    },
                    {
                        "nombre": "Salsa de palta",
                        "precio": 200,
                        "descripcion": ""
                    }
                ],
                "imagenes": [
                    {
                        "url": "https://fakeurl.com/imagen2"
                    }
                ]
            }
        ]

+ Response 201 (application/json)

    + Body

        [
            {
                "id": 1,
                "producto": "Papas Nostra",
                "precio": 3400,
                "descripcion": "Papas fritas, salsa cheddar, panceta crispy",
                "categoria": "Entradas",
                "agregados": [
                    {
                        "nombre": "Extra Cheddar",
                        "precio": 300,
                        "descripcion": ""
                    },
                    {
                        "nombre": "Panceta",
                        "precio": 600,
                        "descripcion": ""
                    }
                ],
                "imagenes": [
                    {
                        "url": "https://fakeurl.com/imagen1"
                    }
                ]
            },
            {
                "id": 2,
                "producto": "Rabas",
                "precio": 6800,
                "descripcion": "Rabas con salsa criolla",
                "categoria": "Entradas",
                "agregados": [
                    {
                        "nombre": "Aros de cebolla",
                        "precio": 700,
                        "descripcion": ""
                    },
                    {
                        "nombre": "Salsa de palta",
                        "precio": 200,
                        "descripcion": ""
                    }
                ],
                "imagenes": [
                    {
                        "url": "https://fakeurl.com/imagen2"
                    }
                ]
            }
        ]


### Obtener un producto por ID [GET/menu/id]
+ Parameters
    + id (number) - El ID del menú a obtener.

+ Response 200 (application/json)

    + Body

        {
            "id": 1,
            "producto": "Papas Nostra",
            "precio": 3400,
            "descripcion": "Papas fritas, salsa cheddar, panceta crispy",
            "categoria": "Entradas",
            "agregados": [
                {
                    "nombre": "Extra Cheddar",
                    "precio": 300,
                    "descripcion": ""
                },
                {
                    "nombre": "Panceta",
                    "precio": 600,
                    "descripcion": ""
                }
            ],
            "imagenes": [
                {
                    "url": "https://fakeurl.com/imagen1"
                }
            ]
        }

### Actualizar un producto por ID [PUT/menu/{id}]
+ Parameters
    + id (number) - El ID del producto a actualizar.

+ Request (application/json)

    + Body

        {
            "producto": "Papas Nostra",
            "precio": 3400,
            "descripcion": "Papas fritas, salsa cheddar, panceta crispy",
            "categoria": "Entradas",
            "agregados": [
                {
                    "nombre": "Extra Cheddar",
                    "precio": 300,
                    "descripcion": ""
                },
                {
                    "nombre": "Panceta",
                    "precio": 600,
                    "descripcion": ""
                }
            ],
            "imagenes": [
                {
                    "url": "https://fakeurl.com/imagen1"
                }
            ]
        }

+ Response 200 (application/json)

    + Body

        {
            "id": 1,
            "producto": "Papas Nostra",
            "precio": 3400,
            "descripcion": "Papas fritas, salsa cheddar, panceta crispy",
            "categoria": "Entradas",
            "agregados": [
                {
                    "nombre": "Extra Cheddar",
                    "precio": 300,
                    "descripcion": ""
                },
                {
                    "nombre": "Panceta",
                    "precio": 600,
                    "descripcion": ""
                }
            ],
            "imagenes": [
                {
                    "url": "https://fakeurl.com/imagen1"
                }
            ]
        }

### Eliminar un producto por ID [DELETE/menu/{id}]
+ Parameters
    + id (number) - El ID del producto a eliminar.

+ Response 200 (application/json)

    + Body

        {
            "message": "Producto, agregados e imágenes eliminados"
        }


# Agregado [/agregados]

## Crear un nuevo agregado [POST /agregados]
+ Request (application/json)
    + Body
        ```json
        {
            "id_menu": 1,
            "nombre": "Extra Queso",
            "precio": 1.50,
            "descripcion": "Queso adicional"
        }
        ```
+ Response 201 (application/json)
    + Body
        ```json
        {
            "id": 1,
            "id_menu": 1,
            "nombre": "Extra Queso",
            "precio": 1.50,
            "descripcion": "Queso adicional"
        }
        ```

## Obtener todos los agregados [GET /agregados]
+ Response 200 (application/json)
    + Body
        ```json
        [
            {
                "id": 1,
                "id_menu": 1,
                "nombre": "Extra Queso",
                "precio": 1.50,
                "descripcion": "Queso adicional"
            }
        ]
        ```

## Obtener un agregado por ID [GET /agregados/{id}]
+ Parameters
    + id: 1 (required, integer) - ID del agregado
+ Response 200 (application/json)
    + Body
        ```json
        {
            "id": 1,
            "id_menu": 1,
            "nombre": "Extra Queso",
            "precio": 1.50,
            "descripcion": "Queso adicional"
        }
        ```

## Actualizar un agregado [PUT /agregados/{id}]
+ Parameters
    + id: 1 (required, integer) - ID del agregado a actualizar
+ Request (application/json)
    + Body
        ```json
        {
            "id_menu": 1,
            "nombre": "Extra Queso",
            "precio": 1.75,
            "descripcion": "Queso extra"
        }
        ```
+ Response 200 (application/json)
    + Body
        ```json
        {
            "id": 1,
            "id_menu": 1,
            "nombre": "Extra Queso",
            "precio": 1.75,
            "descripcion": "Queso extra"
        }
        ```

## Eliminar un agregado [DELETE /agregados/{id}]
+ Parameters
    + id: 1 (required, integer) - ID del agregado a eliminar
+ Response 200 (application/json)
    + Body
        ```json
        {
            "message": "Agregado eliminado con éxito"
        }
        ```

# Imagen [/imagen]

## Agregar imagen al producto [POST /imagen]
+ Request (application/json)
    + Body
        ```json
        {
            "id_menu": 1,
            "url": "http://example.com/image.jpg"
        }
        ```
+ Response 201 (application/json)
    + Body
        ```json
        {
            "id": 1,
            "id_menu": 1,
            "url": "http://example.com/image.jpg"
        }
        ```

## Obtener imágenes del producto [GET /imagen/menu/{id_menu}]
+ Parameters
    + id_menu: 1 (required, integer) - ID del menú
+ Response 200 (application/json)
    + Body
        ```json
        [
            {
                "id": 1,
                "id_menu": 1,
                "url": "http://example.com/image1.jpg"
            },
            {
                "id": 2,
                "id_menu": 1,
                "url": "http://example.com/image2.jpg"
            }
        ]
        ```

## Obtener imagen por ID [GET /imagen/{id}]
+ Parameters
    + id: 1 (required, integer) - ID de la imagen
+ Response 200 (application/json)
    + Body
        ```json
        {
            "id": 1,
            "id_menu": 1,
            "url": "http://example.com/image.jpg"
        }
        ```

## Cambiar imagen [PUT /imagen/{id}]
+ Parameters
    + id: 1 (required, integer) - ID de la imagen
+ Request (application/json)
    + Body
        ```json
        {
            "url": "http://example.com/new_image.jpg"
        }
        ```
+ Response 200 (application/json)
    + Body
        ```json
        {
            "id": 1,
            "id_menu": 1,
            "url": "http://example.com/new_image.jpg"
        }
        ```

## Borrar imagen [DELETE /imagen/{id}]
+ Parameters
    + id: 1 (required, integer) - ID de la imagen
+ Response 200 (application/json)
    + Body
        ```json
        {
            "message": "Imagen eliminada con éxito"
        }
        ```

# Pedidos [/pedidos]

## Crear Pedido [POST /pedidos]
+ Request (application/json)
    + Body
        ```json
        {
            "id_menu": 1,
            "id_mesa": 2,
            "agregados": [1, 2],
            "cantidad": 3
        }
        ```
+ Response 201 (application/json)
    + Body
        ```json
        {
            "message": "Pedido creado con éxito"
        }
        ```

## Obtener Pedidos [GET /pedidos]
+ Response 200 (application/json)
    + Body
        ```json
        [
            {
                "id": 1,
                "id_mesa": 2,
                "cantidad": 3,
                "solicitado": "2024-09-08T12:00:00Z",
                "entregado": false,
                "hentrega": null,
                "producto": {
                    "id": 1,
                    "producto": "Pizza"
                },
                "agregados": [
                    {
                        "id": 1,
                        "nombre": "Extra Queso"
                    }
                ]
            }
        ]
        ```

## Obtener Pedido [GET /pedidos/{id}]
+ Parameters
    + id: 1 (required, integer) - ID del pedido
+ Response 200 (application/json)
    + Body
        ```json
        {
            "id": 1,
            "id_mesa": 2,
            "cantidad": 3,
            "solicitado": "2024-09-08T12:00:00Z",
            "entregado": false,
            "hentrega": null,
            "producto": {
                "id": 1,
                "producto": "Pizza"
            },
            "agregados": [
                {
                    "id": 1,
                    "nombre": "Extra Queso"
                }
            ]
        }
        ```

## Marcar Pedido como Entregado [PUT /pedidos/{id}/entregar]
+ Parameters
    + id: 1 (required, integer) - ID del pedido
+ Response 200 (application/json)
    + Body
        ```json
        {
            "message": "Pedido marcado como entregado",
            "pedido": {
                "id": 1,
                "entregado": true,
                "hentrega": "2024-09-08T12:05:00Z"
            }
        }
        ```

## Forzar Corregir Pedido [PUT /pedidos/{id}/corregir-forzado]
+ Parameters
    + id: 1 (required, integer) - ID del pedido
+ Request (application/json)
    + Body
        ```json
        {
            "id_menu": 2,
            "id_agregado": 3,
            "cantidad": 2
        }
        ```
+ Response 200 (application/json)
    + Body
        ```json
        {
            "message": "Pedido corregido con éxito",
            "pedido": {
                "id": 1,
                "id_menu": 2,
                "id_agregado": 3,
                "cantidad": 2,
                "solicitado": "2024-09-08T12:00:00Z",
                "entregado": false,
                "hentrega": null
            }
        }
        ```
+ Response 403 (application/json)
    + Body
        ```json
        {
            "message": "El tiempo para corregir el pedido ha expirado"
        }
        ```
+ Response 400 (application/json)
    + Body
        ```json
        {
            "message": "No se puede corregir un pedido que ya ha sido entregado"
        }
        ```

## Corregir Pedido [PUT /pedidos/{id}/corregir]
+ Parameters
    + id: 1 (required, integer) - ID del pedido
+ Request (application/json)
    + Body
        ```json
        {
            "id_menu": 2,
            "id_agregado": 3,
            "cantidad": 2
        }
        ```
+ Response 200 (application/json)
    + Body
        ```json
        {
            "message": "Pedido corregido con éxito",
            "pedido": {
                "id": 1,
                "id_menu": 2,
                "id_agregado": 3,
                "cantidad": 2,
                "solicitado": "2024-09-08T12:00:00Z",
                "entregado": false,
                "hentrega": null
            }
        }
        ```
+ Response 403 (application/json)
    + Body
        ```json
        {
            "message": "El tiempo para corregir el pedido ha expirado"
        }
        ```
+ Response 400 (application/json)
    + Body
        ```json
        {
            "message": "No se puede corregir un pedido que ya ha sido entregado"
        }
        ```
## Eliminar Pedido [DELETE /pedidos/{id}]
+ Parameters
    + id: 1 (required, integer) - ID del pedido
+ Response 200 (application/json)
    + Body
        ```json
        {
            "message": "Pedido eliminado con éxito"
        }
        ```
+ Response 403 (application/json)
    + Body
        ```json
        {
            "message": "No se puede eliminar el pedido después de 3 minutos"
        }
        ```
+ Response 400 (application/json)
    + Body
        ```json
        {
            "message": "No se puede eliminar un pedido que ya ha sido entregado"
        }
        ```

## Forzar Eliminación de Pedido [DELETE /pedidos/{id}/forzar-eliminar]
+ Parameters
    + id: 1 (required, integer) - ID del pedido
+ Response 200 (application/json)
    + Body
        ```json
        {
            "message": "Pedido eliminado con éxito, sin restricción de tiempo"
        }
        ```
+ Response 400 (application/json)
    + Body
        ```json
        {
            "message": "No se puede eliminar un pedido que ya ha sido entregado"
        }
        ```
        
        
        
        
FORMAT: 1A
HOST: http://localhost:5000


# Mozo [/mozocall]

### Llamar al mozo [POST /mozocall]

+ Request (application/json)

    + Body
        ```json
        {
          "id_mesa": 5
        }
        ```

+ Response 201 (application/json)

    + Body
        ```json
        {
          "message": "El mozo ha sido llamado"
        }
        ```

+ Response 400 (application/json)

    + Body
        ```json
        {
          "message": "Número de mesa inválido"
        }
        ```

### Obtener todas las llamadas [GET /mozocall]

+ Response 200 (application/json)

    + Body
        ```json
        [
          {
            "id": 1,
            "solicitado": "2023-09-15T12:34:56",
            "atendido": false,
            "hentrega": null
          },
          {
            "id": 2,
            "solicitado": "2023-09-15T12:40:00",
            "atendido": true,
            "hentrega": "2023-09-15T12:45:00"
          }
        ]
        ```

### Obtener una llamada específica [GET /mozocall/{id}]

+ Parameters
    + id: 1 (number, required) - El ID de la llamada al mozo

+ Response 200 (application/json)

    + Body
        ```json
        {
          "id": 1,
          "solicitado": "2023-09-15T12:34:56",
          "atendido": false,
          "hentrega": null
        }
        ```

+ Response 404 (application/json)

    + Body
        ```json
        {
          "message": "Llamada no encontrada"
        }
        ```

### Marcar llamada como atendida [PUT /mozocall/{id}/entregar]

+ Parameters
    + id: 1 (number, required) - El ID de la llamada al mozo

+ Response 200 (application/json)

    + Body
        ```json
        {
          "message": "MozoCall marcado como atendido",
          "mozoCall": {
            "id": 1,
            "atendido": true,
            "hentrega": "2023-09-15T12:45:00"
          }
        }
        ```

+ Response 400 (application/json)

    + Body
        ```json
        {
          "message": "El mozo ya atendió esta mesa"
        }
        ```

### Eliminar una llamada [DELETE /mozocall/{id}]

+ Parameters
    + id: 1 (number, required) - El ID de la llamada al mozo

+ Response 200 (application/json)

    + Body
        ```json
        {
          "message": "MozoCall eliminado con éxito"
        }
        ```

+ Response 400 (application/json)

    + Body
        ```json
        {
          "message": "No se puede eliminar un mozoCall que ya ha sido atendido"
        }
        ```


# Autenticación [/auth]

## Registro de Usuario [POST /auth/register]
+ Request (application/json)
    + Body
        ```json
        {
            "nombre": "Juan Pérez",
            "email": "juan.perez@example.com",
            "password": "password123",
            "id_permiso": 2
        }
        ```
+ Response 201 (application/json)
    + Body
        ```json
        {
            "message": "User created"
        }
        ```
+ Response 400 (application/json)
    + Body
        ```json
        {
            "message": "Missing fields"
        }
        ```
    + Body
        ```json
        {
            "message": "Invalid id_permiso"
        }
        ```
    + Body
        ```json
        {
            "message": "User already exists"
        }
        ```

## Inicio de sesión [POST /auth/login]
+ Request (application/json)
    + Body
        ```json
        {
            "email": "juan.perez@example.com",
            "password": "password123"
        }
        ```
+ Response 200 (application/json)
    + Body
        ```json
        {
            "token": "jwt_token_here"
        }
        ```
+ Response 401 (application/json)
    + Body
        ```json
        {
            "message": "Credenciales inválidas"
        }
        ```

## Verificar Permiso [GET /auth/permiso]
+ Request (application/json)
    + Headers
        + Authorization: Bearer jwt_token_here
+ Response 200 (application/json)
    + Body
        ```json
        {
            "id_usuario": 1,
            "permiso": "Administrador",
            "nivel": 2
        }
        ```
+ Response 404 (application/json)
    + Body
        ```json
        {
            "message": "Usuario no encontrado"
        }
        ```
    + Body
        ```json
        {
            "message": "No se encontraron permisos para este usuario"
        }
        ```

## Eliminar Usuario [DELETE /auth/users/{user_id}]
+ Parameters
    + user_id: 1 (required, integer) - ID del usuario a eliminar
+ Request (application/json)
    + Headers
        + Authorization: Bearer jwt_token_here
+ Response 200 (application/json)
    + Body
        ```json
        {
            "message": "Usuario eliminado con éxito"
        }
        ```
+ Response 404 (application/json)
    + Body
        ```json
        {
            "message": "Usuario no encontrado"
        }
        ```

## Obtener Usuarios [GET /auth/users]
+ Request (application/json)
    + Headers
        + Authorization: Bearer jwt_token_here
+ Response 200 (application/json)
    + Body
        ```json
        [
            {
                "id": 1,
                "nombre": "Juan Pérez",
                "email": "juan.perez@example.com",
                "id_permiso": 2
            }
        ]
        ```

# Middleware

## Requerir Inicio de Sesión [login_required]
+ Description: Asegura que el usuario esté autenticado para acceder al recurso.

## Comprobar Permisos [check_permissions]
+ Description: Asegura que el usuario tenga los permisos necesarios para acceder al recurso.
+ Parameters
    + required_permission: 1 (required, integer) - Nivel de permiso necesario para acceder al recurso